generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  uuid_event    String         @id @default(uuid()) @db.VarChar(36)
  name          String         @db.VarChar(255)
  locate        String         @db.VarChar(255)
  date_and_time DateTime
  description   String?
  egalitarian   Boolean        @default(true)
  date_stop_sub DateTime
  additionals   Additional[]
  spents        Spent[]
  userHasevent  UserHasEvent[]
}

model User {
  uuid_user    String         @id @default(uuid()) @db.VarChar(36)
  name         String         @db.VarChar(255)
  phone        String         @db.VarChar(15)
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  additionals  Additional[]
  userHasevent UserHasEvent[]
}

model Spent {
  uuid_spent  String    @id @default(uuid()) @db.VarChar(36)
  name        String    @db.VarChar(255)
  description String?
  value       Decimal   @db.Decimal(10, 2)
  amount      Int
  type_spent  TypeSpent
  uuid_event  String    @db.VarChar(36)
  event       Event     @relation(fields: [uuid_event], references: [uuid_event], onDelete: Cascade)
}

model UserHasEvent {
  id         Int    @id @default(autoincrement())
  uuid_user  String    @db.VarChar(36)
  uuid_event String    @db.VarChar(36)
  user_level UserLevel
  event      Event     @relation(fields: [uuid_event], references: [uuid_event], onDelete: Cascade)
  user       User      @relation(fields: [uuid_user], references: [uuid_user], onDelete: Cascade)

  @@unique([uuid_user, uuid_event])
}

model Additional {
  id         Int  @id @default(autoincrement())
  uuid_user  String  @db.VarChar(36)
  uuid_event String  @db.VarChar(36)
  drink      Boolean @default(false)
  food       Boolean @default(false)
  hard_drink Boolean @default(false)
  pastime    Boolean @default(false)
  event      Event   @relation(fields: [uuid_event], references: [uuid_event], onDelete: Cascade)
  user       User    @relation(fields: [uuid_user], references: [uuid_user])
}

enum TypeDivision {
  egalitarian
  absorption
}

enum TypeSpent {
  hard_drink
  dink
  food
  location
  pastime
}

enum UserLevel {
  owner
  guest
  manager
}
